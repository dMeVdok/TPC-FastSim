latent_dim: 32
batch_size: 32
lr: 1.e-4
lr_schedule_rate: 0.999

num_disc_updates: 8
gp_lambda: 10.
gpdata_lambda: 0.
cramer: False
stochastic_stepping: True

save_every: 500
num_epochs: 10000
#num_epochs: 10000

feature_noise_power: NULL
feature_noise_decay: NULL

data_version: 'data_v4'
pad_range: [-3, 5]
time_range: [-7, 9]
scaler: 'gaussian'

architecture:
    generator:
        - block_type: 'fully_connected'
          arguments:
            units: [32, 64, 64, 64, 6]
            activations: ['leaky_relu', 'leaky_relu', 'leaky_relu', 'leaky_relu', NULL]
            kernel_init: 'glorot_uniform'
            input_shape: [37,]
            output_shape: NULL
            name: 'generator'
        - block_type: 'moments_to_image'
          arguments:
            output_shape: [8, 16]
            activation: >
              (
                lambda
                  mu,
                  ms,
                  it,
                  sigma0_scale=1,
                  sigma1_scale=6,
                  tanh_pow=0.5,
                  sx=15,
                  sy=7:
                  (
                    tf.tanh(mu) * tf.constant([[sy/2, sx/2]], dtype=tf.float32) + tf.constant([[sy/2, sx/2]], dtype=tf.float32),
                    tf.stack([
                      (0.001 + 0.999*((1. + tf.tanh(ms[:,0])) / 2)**tanh_pow)*sigma0_scale,
                      tf.tanh(ms[:,1])*tf.sqrt((0.001 + 0.999*((1. + tf.tanh(ms[:,0])) / 2)**tanh_pow)*(0.001 + 0.999*((1. + tf.tanh(ms[:,2])) / 2)**tanh_pow)*sigma0_scale*sigma1_scale),
                      (0.001 + 0.999*((1. + tf.tanh(ms[:,2])) / 2)**tanh_pow)*sigma1_scale
                    ], axis=1),
                    tf.nn.relu(it)
                  )
              )
            pretraining_mode: true
            name: 'moments_to_image'

    discriminator:
        - block_type: 'image_to_moments'
          arguments:
            features_shape: [5,]
            image_shape: [6,] # [8, 16]
            axis: -1
            pretraining_mode: true
            name: 'image_to_moments_concat_with_features'
        - block_type: 'fully_connected'
          arguments:
            units: [32, 64, 64, 64, 128, 1]
            activations: ['leaky_relu', 'leaky_relu', 'leaky_relu', 'leaky_relu', 'leaky_relu', NULL]
            #units: [32, 64, 1]
            #activations: ['relu', 'relu', NULL]
            kernel_init: 'glorot_uniform'
            input_shape: [11,]
            output_shape: NULL
            name: 'discriminator_head'
